ASC-----------------------------------------------------------------------------
ASC is a programming language.
"Abstract System for Computation"
It's a mathematical programming languagee based on a meta language for describing geometry.
"Mathematical programming language" means that it has several key features.
They are
	- explicit eager and lazy evaluation.
	- explicit contexts.

Because ASC is a systems programming langauge, contexts map directly to how contexts are managed in assembly.

Context-------------------------------------------------------------------------
Contexts represent the collection of entities which are accessible at a given point in the evaluation of a program.
Contexts are created by functions and modules.
Module contexts are static as modules persist for the duration of a program.
Function contexts are dynamic because they are created when a function is applied and discarded when the evaluation of a function application is completed.

Entities are created and discarded with contexts.
Most entities will be declared as modules as it is desireable for things such as functions and constants to persist, and be accessible, for the duration of a program.
Other things such as function parameters or closures need only persist as they are needed in a discrete statge of a program.

Semantics-----------------------------------------------------------------------
A program is composed of a number of basic entities:
	- modules
	- functions
	- collections
	- types
	- data
	- variables
	- notations
A whole program is contained within a single module.
That module may depend on other modules.

Evaluating a Program------------------------------------------------------------
A program is contained in a single, top-level module which contains the function used to begin the program.
The top-level module can depend on other modules.
Program evaluation begins by applying a function in the top-level module to some parameters.

Environment---------------------------------------------------------------------
The environment represents the resources available for performing computation.

Expressions---------------------------------------------------------------------
An expression is a top-level syntactic entity.
It consists of an operation and operands supplied to it.
Expressions may be nested by replacing an operand with another expression.
An expression which does not contain any nested expressions is an atomic expression.
A program is a series of expressions which can each contain further nested expressions.

Evaluation----------------------------------------------------------------------
Evaluation is the process by which computation is performed in ASC.
It reduces an expression to a single corresponding entity by computing the operation on the operands provided by the expression.
In the case of nested expressions, evaluation will traverse the larger expression from left-to-right, top-to-bottom until it encounters an atomic expression.
The atomic expression will be computed to an entity and then the sccope of evaluation will move to the top-level expression and traverse to the next atomic expression.
This is repeated until the top-level expression is computed to an entity.

In the case of a collection of expressions, evaluation will reduce the expressions in the lexical order that they were given in the collection.
Each expression in the collection is aliased as a top-level expression until it is reduced entirely.

Programs------------------------------------------------------------------------
A program is a top-level module which contains an entry function and all entities necessary to evaluate the function.

Semantic Overview---------------------------------------------------------------
There are three distinct domains of semantic reasoning within ASC. 
There are the systems of type, notation, and expression.
Each of the three serve specific roles and programs are created through their interaction.
