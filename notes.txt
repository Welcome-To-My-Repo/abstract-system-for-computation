type system founded in pure geometry.
homotopy type theory and algebraic geometry too interested in determining exact shape.
strength and purity are weakened by heavy grounding in shape.
extensional descriptions of geometry.

type system supports both extensional and intensional definitions of a type.
they are treated as mutually dependent descriptors.
Thus an extensional type can be defined as the explicit list of all the other types which share its qualities and an intensional type can be defined as the explicit list of the qualities which other types must possess.
The distinction betwen the two approaches to definition is that extensional definitions of type can be reasoned about simply by referring to the list defined for that type whereas intensional types rely more on inference about whether the appropriate qualities are exhibited.

Concept of a type in ASC is a geometric space.
A type in ASC is a way of naming the collection of qualities of an entity.
Types are treated as conceptually reduced geometric spaces.
More refined aspects of geometry such as shape, position, size, and dimension are discarded.
The type of an entity is simply a space with form.
The properties the entity are reflected by the properties of that form.

ASC compiles to an arch-independent assembly.
the assembly has an infinite number of general purpose registers.
it also has a set number of special registers.
	- Program Counter
	- Base Pointer
	- Zero
Data types correspond to the data types in ASC.
There's Long, Short, and Fraction.

ASC syntax is created by patterns.
There are a few notations which are determined using characters rather than symbols. 
This allows these notations to be represented with any format the programmer may chose.
These character notations are:
	-function declaration
	-function definition
	-sequence definition
	-sequence access
	-sequence introspection
	-type declaration
	-type assertion
	-type introspection
	-module definition
	-module access
	-conditional evaluation

The function declaration specifies the name of the function and the names of each parameter.
Function declarations may optionally specify a generic definition of the function.
A function definition specifies the types allowed for each parameter and a definition which is applied when parameters of those types are given to the function.

How do to sequence definition with just types and no names?

{1 2 3} `a sequence of constants`
{long long short} `a sequence with fields named "long", "long", "short"`
Sequence(long long short) `a sequence with fields typed long, long, and short`
Sequence(100) `a sequence with 100 fields`
Should a sequence be allowed with no default values?


notations:

`comment`

g(x) = x
f(x) = g(x)
f(nat) = g(x)
f(x) = y {y = g(x)}

? x y z

{1 2 3}
{x y z}

how do types work?
Think of a type as some kind of geometric form.
It doesn't matter exactly what the shape, size, position, or dimension of the form is.
All that is considered is whether two shapes are different or alike in terms of their features.

AND /\
OR \/
NOT ~

notation prefix is semicolon ;


Continuation design:
To implement full continuations, they must have 6 capabilities...
1.) Asymmetric; be able to move control back to the point where the continuation was called.
2.) Stackful; act like a regular function with its own context and stack.
3.) Delimited; have a finite definition that doesn't contain the entire program.
4.) Multi-prompt; ability to be nested and recursive.
5.) Reentrant; dynamically capture the program state at a given point as a callable continuation.
6.) Cloneable; ability to duplicate any continuation object.
