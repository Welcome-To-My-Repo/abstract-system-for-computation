type system founded in pure geometry.
homotopy type theory and algebraic geometry too interested in determining exact shape.
strength and purity are weakened by heavy grounding in shape.
extensional descriptions of geometry.

type system supports both extensional and intensional definitions of a type.
they are treated as mutually dependent descriptors.
Thus an extensional type can be defined as the explicit list of all the other types which share its qualities and an intensional type can be defined as the explicit list of the qualities which other types must possess.
The distinction betwen the two approaches to definition is that extensional definitions of type can be reasoned about simply by referring to the list defined for that type whereas intensional types rely more on inference about whether the appropriate qualities are exhibited.

ASC compiles to an arch-independent assembly.
the assembly has an infinite number of general purpose registers.
it also has a set number of special registers.
	- Program Counter
	- Base Pointer
	- Zero
Data types correspond to the data types in ASC.
There's Long, Short, and Fraction.

ASC syntax is created by patterns.
There are a few notations which are determined using characters rather than symbols. 
This allows these notations to be represented with any format the programmer may chose.
These character notations are:
	-function declaration
	-function definition
	-sequence definition
	-sequence access
	-sequence introspection
	-type declaration
	-type assertion
	-type introspection
	-module definition
	-module access
	-conditional evaluation

The function declaration specifies the name of the function and the names of each parameter.
Function declarations may optionally specify a generic definition of the function.
A function definition specifies the types allowed for each parameter and a definition which is applied when parameters of those types are given to the function.

How do to sequence definition with just types and no names?

{1 2 3} `a sequence of constants`
{long long short} `a sequence with fields named "long", "long", "short"`
Sequence(long long short) `a sequence with fields typed long, long, and short`
Sequence(100) `a sequence with 100 fields`
Should a sequence be allowed with no default values? No.

Characters which are used directly in syntax.
().:;"'`[]{}&#^@

Types are viewed as non-distinct geometric formations.
The size, shape, positioning, and dimensions of a form are not known.
Two things are considered: what (non-descript) features may be present on a form, and what features are shared between two forms.
Types can be defined as a unique form, a combination of multiple forms, a difference of forms, or a superposition of multiple forms.
A combination exhibits all the features of a collection of forms as a unique formation.
A difference exhibits all the features present in one form that are not shared with another.
A superposition is not a unique form, but instead may simultaneously exhibit any one form in a collection of existing forms.
A sequence is then an ordered collection of forms.
A function is a transformation from one collection of forms to another.
The types of functions and sequences are also represented as forms.

AND /\
OR \/
NOT ~

notation prefix is semicolon ;


Continuation design:
To implement full continuations, they must have 6 capabilities...
1.) Asymmetric; be able to move control back to the point where the continuation was called.
2.) Stackful; act like a regular function with its own context and stack.
3.) Delimited; have a finite definition that doesn't contain the entire program.
4.) Multi-prompt; ability to be nested and recursive.
5.) Reentrant; dynamically capture the program state at a given point as a callable continuation.
6.) Cloneable; ability to duplicate any continuation object.

Functions:
Declare a function in one place or separately as a signature and implementation.
Declare a generalized function
Declare a type specific function.
Define a function as a sequence of statements.
Define a function as an expression using only the function parameters.
Complete ad hoc polymorphism where a single function name can be defined for multiple arities and parameter types.
Declare a function with dynamic extent

Function syntax

A function has two components, a declaration and a definition.
The declaration specifies the name and parameters for a function.
The definition specifies what expressions the function reduces to.
Functions can be written 

A function has two components, a declaration and a definition

A function has two parts, a declaration and a definition.
The declaration specifies the name and parameters of the function.
A type-specific function also specifies the types accepted for one or more parameters.
A function declaration begins with the name of the function, followed by a sequence of parameter declarations inside closed parentheses. 
The patentheses are followed by the equal sign and then a sequence of one or more return parameters.
Function declarations can be overloaded with multiple types.
Only one name can ever be associated with the parameter for a given function.
Once a name for a parameter has been established in a declaration, a different name may not be used in other declarations.
