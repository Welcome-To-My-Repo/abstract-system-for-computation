Constructors:
	Numerical Constant:		
				Constant = [x:Nat, Symbol..x >= "0" /\ Symbol..x <= "9" ]
	Collection Constructor:		
				{ _ ... }
				{ _ ... \\ _ ...}
	Function Constructor:
				_ -> _
	Dynamic Scope:
				_ .\ _
				_ /. _
	Type Constructor:
				[ _ ... ]
	Syntax Constructor:
				` _ ... `

Operators:

	Algebra:
				_ + _
				_ - _
				_ * _
				_ / _
				_ // _
				( _ )
				_ , _ "introduction"
	Environment:
		Binding:
				_ = _
		Derive Location:
				_ @
		Reference Location:
				@ _
		Clobber:
				_ << _
		Cast:
				_ ~ _
		Storage Size:
				& _
		Derive Type:
				; _
		Membership:
				_ : _
		Cardinality:
				# _
		Symbol Quotation:
				' _
		Symbol Unquotation:
				~' _

	Comparison and Logic:
				_ = _
				_ /= _
				_ < _
				_ <= _
				_ > _
				_ >= _
		Negation:
				-. _
		Conjunction:
				_ /\ _
		Disjunction:
				_ \/ _
		Conditional Evaluation:
				? _ _ _
	
	Collections:
		Member Access:	
				_ . _
		Index Access:
				_ .. _
		Explode:
				_ *
	
	Types:
		Type Binding:
				_ : _
	
	Functions:
		Replace Active Context:
				_ ... _
		Bind Handler:
				_ !! _
		Trigger Event:
				_ !
	
	Annotation:
				_ ; _

	Reserved Words:
		Any
		This
		None (alternatively the underscore)
		Symbol
		Constant
		Collection
		Type
		Function
		Expression

Syntax is a data type that represents the semantics with which a certain 
expression may be replaced with an object.